{"version":3,"file":"index.js","sourceRoot":"","sources":["../src/index.ts"],"names":[],"mappings":"AAAA,OAAO,EACL,KAAK,EACL,aAAa,EACb,SAAS,GACV,MAAM,QAAQ,CAAC;AAEhB,OAAO,EAAE,aAAa,EAAE,MAAM,kBAAkB,CAAC;AACjD,OAAO,EAAE,iBAAiB,EAAE,MAAM,uBAAuB,CAAC;AAmB1D,MAAM,MAAM,GAAG,aAAa,CAAC,SAAS,CAAC,CAAC;AACxC,MAAM,UAAU,GAAG,iBAAiB,CAAC,SAAS,CAAC,CAAC;AAEhD,MAAM,CAAC,MAAM,IAAI,GAAG,KAAK,EAAE,CAAuB,EAAE,GAAG,CAAY,EAAmB,EAAE,CACtF,MAAM,CAAC,CAAC,CAAC,EAAE,EAAE,CAAC,KAAK,CAAC,kBAAkB,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,GAAG,CAAC,CAAC,CAAC;AACvD,MAAM,CAAC,MAAM,YAAY,GAAG,KAAK,EAAE,CAAuB,EAAE,GAAG,CAAY,EAAmB,EAAE,CAC9F,MAAM,CAAC,aAAa,EAAE,CAAC,EAAE,GAAG,CAAC,CAAC,CAAC;AAEjC,MAAM,CAAC,MAAM,QAAQ,GAAG,CAAC,CAAuB,EAAE,GAAG,CAAY,EAAU,EAAE,CAC3E,UAAU,CAAC,CAAC,CAAS,EAAE,EAAE,CAAC,KAAK,CAAC,kBAAkB,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,GAAG,CAAC,CAAC,CAAC;AACnE,MAAM,CAAC,MAAM,gBAAgB,GAAG,CAAC,CAAuB,EAAE,GAAG,CAAY,EAAU,EAAE,CACnF,UAAU,CAAC,aAAa,EAAE,CAAC,EAAE,GAAG,CAAC,CAAC,CAAC;AAErC,eAAe;IACb,IAAI;IACJ,YAAY;IACZ,gBAAgB;IAChB,QAAQ;CACT,CAAC","sourcesContent":["import {\n  parse,\n  parseFragment,\n  serialize,\n} from 'parse5';\n\nimport { parseLiterals } from './parse-literals';\nimport { parseLiteralsSync } from './parse-literals-sync';\n\n// export const DEFAULT_MINIFY_OPTIONS: htmlMinifier.Options = {\n//   collapseBooleanAttributes: true,\n//   collapseWhitespace: true,\n//   minifyCSS: true,\n//   minifyJS: true,\n//   processConditionalComments: true,\n//   quoteCharacter: '\"',\n//   removeComments: true,\n//   removeOptionalTags: true,\n//   removeRedundantAttributes: true,\n//   removeScriptTypeAttributes: true,\n//   removeStyleLinkTypeAttributes: true,\n//   sortAttributes: true,\n//   sortClassName: true,\n//   trimCustomFragments: true,\n// };\n\nconst parser = parseLiterals(serialize);\nconst parserSync = parseLiteralsSync(serialize);\n\nexport const html = async (s: TemplateStringsArray, ...e: unknown[]): Promise<string> =>\n  parser((c) => parse(`<!doctype html>${c}`), s, ...e);\nexport const htmlFragment = async (s: TemplateStringsArray, ...e: unknown[]): Promise<string> =>\n  parser(parseFragment, s, ...e);\n\nexport const htmlSync = (s: TemplateStringsArray, ...e: unknown[]): string =>\n  parserSync((c: string) => parse(`<!doctype html>${c}`), s, ...e);\nexport const htmlFragmentSync = (s: TemplateStringsArray, ...e: unknown[]): string =>\n  parserSync(parseFragment, s, ...e);\n\nexport default {\n  html,\n  htmlFragment,\n  htmlFragmentSync,\n  htmlSync,\n};\n"]}